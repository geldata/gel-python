# AUTOGENERATED FROM 'object/link_prop.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import typing
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class LinkPropResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    friends: list[LinkPropResultFriendsItem]


@dataclasses.dataclass
class LinkPropResultFriendsItem(NoPydanticValidation):
    id: uuid.UUID
    name: str
    created_at: datetime.datetime | None

    @typing.overload
    def __getitem__(self, key: typing.Literal["@created_at"]) -> datetime.datetime | None:
        ...

    @typing.overload
    def __getitem__(self, key: typing.Literal["@strength"]) -> float | None:
        ...

    def __getitem__(self, key: str) -> typing.Any:
        raise NotImplementedError


async def link_prop(
    executor: gel.AsyncIOExecutor,
) -> list[LinkPropResult]:
    return await executor.query(
        """\
        create type Person {
            create required property name -> str;
            create property created_at -> datetime;
            create multi link friends -> Person {
                create property strength -> float64;
                create property created_at -> datetime;
            }
        };

        select Person {
            name,
            friends: {
                name,
                @created_at,
                created_at,
                @strength,
            }
        };\
        """,
    )
