abstract type Named {
    required name: str;
    name_len := len(.name);
    nickname: str;
    nickname_len := len(.nickname);
}

abstract type ExclusivelyNamed {
    required name: str {
        delegated constraint exclusive;
    }
}

type UserGroup extending Named {
    # many-to-many
    multi link users: User;
    mascot: str;
}

type GameSession {
    required num: int64;
    required public: bool {
        default := false;
    };
    # one-to-many
    multi link players: User {
        constraint exclusive;
        property is_tall_enough: bool;
    };
}

type User extending Named {
    # test computed backlink
    groups := .<users[is UserGroup];
}

type Post {
    required body: str;
    required link author: User;
}

module sub {
    type TypeInSub {
        post: default::Post;
        subsub: default::sub::subsub::TypeInSubSub;
        ntup: tuple<a: str, b: tuple<c: int64, d: str>>;
    }

    module subsub {
        type TypeInSubSub;
    }
}

module emptysub {
}

# Object with required multi link, no link props
type Party extending ExclusivelyNamed {
    required multi members: User;
}

# Object with required multi link, has link props
type Raid extending ExclusivelyNamed {
    required multi members: User {
        role: str;
        rank: int64;
    };
}

# Object with multi link and several link props
type Team extending ExclusivelyNamed {
    multi members: User {
        role: str;
        rank: int64;
    };
}

# Object with single required link with link props
type Image {
    required file: str;
    required link author: User {
        caption: str;
        year: int64;
    }
}

# Object with single optional link no link props
type Loot extending ExclusivelyNamed {
    link owner: User;
}

# Object with single optional link no link props
type StackableLoot extending ExclusivelyNamed {
    link owner: User {
        count: int64;
        bonus: bool;
    }
}

# Object with optional link to self, no link props
type LinearPath {
    required label: str {
        constraint exclusive;
    }
    next: LinearPath {
        constraint exclusive;
    }
}

# Object with optional link to self, has link props
type StepPath {
    required label: str {
        constraint exclusive;
    }
    next: LinearPath {
        constraint exclusive;
        steps: int64 {
            default := 1
        }
    }
}

type KitchenSink {
    required p_str: str;
    required multi p_multi_str: str;
    p_opt_str: str;
    multi p_opt_multi_str: str;

    required array: array<str>;
    required multi p_multi_arr: array<str>;
    p_opt_arr: array<str>;
    multi p_opt_multi_arr: array<str>;

    required p_arrtup: array<tuple<str>>;
    required multi p_multi_arrtup: array<tuple<str>>;
    p_opt_arrtup: array<tuple<str>>;
    multi p_opt_multi_arrtup: array<tuple<str>>;

    required p_tuparr: tuple<array<str>>;
    required multi p_multi_tuparr: tuple<array<str>>;
    p_opt_tuparr: tuple<array<str>>;
    multi p_opt_multi_tuparr: tuple<array<str>>;

    date: cal::local_date;
    ts: datetime;
    lts: cal::local_datetime;
}
