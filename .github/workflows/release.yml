name: Release

on:
  workflow_dispatch:
    inputs: {}

  pull_request:
    branches:
      - "master"
      - "ci"
      - "release/[0-9]+.x"
      - "release/[0-9]+.[0-9]+.x"
    paths:
      - "gel/_version.py"

jobs:
  validate-release-request:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.checkver.outputs.version }}
    steps:
    - name: Validate release PR
      uses: edgedb/action-release/validate-pr@master
      id: checkver
      with:
        github_token: ${{ secrets.RELEASE_BOT_GITHUB_TOKEN }}
        require_team: Release Managers
        require_approval: no
        version_file: gel/_version.py
        version_line_pattern: |
          __version__\s*=\s*(?:['"])([[:PEP440:]])(?:['"])

    - name: Stop if not approved
      if: steps.checkver.outputs.approved != 'true'
      run: |
        echo ::error::PR is not approved yet.
        exit 1

    - name: Store release version for later use
      env:
        VERSION: ${{ steps.checkver.outputs.version }}
      run: |
        mkdir -p dist/
        echo "${VERSION}" > dist/VERSION

    - uses: actions/upload-artifact@v4
      with:
        name: dist-version
        path: dist/

  build-sdist:
    needs: validate-release-request
    runs-on: ubuntu-latest

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 50
        submodules: true

    - name: Set up Python
      uses: actions/setup-python@v5

    - name: Build source distribution
      run: |
        pip install -U setuptools wheel pip build
        python -m build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: dist-source
        path: dist/*.tar.*

  build-wheels-matrix:
    needs: validate-release-request
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - run: pip install cibuildwheel==3.0.1
      - id: set-matrix
        # Cannot test on Musl distros yet.
        run: |
          MATRIX_INCLUDE=$(
            {
              cibuildwheel --print-build-identifiers --platform linux --archs x86_64,aarch64 | grep cp | grep many |  jq -nRc '{"only": inputs, "os": "ubuntu-latest"}' \
              && cibuildwheel --print-build-identifiers --platform macos --archs x86_64,arm64 | grep cp |  jq -nRc '{"only": inputs, "os": "macos-latest"}' \
              && cibuildwheel --print-build-identifiers --platform windows --archs AMD64 | grep cp |  jq -nRc '{"only": inputs, "os": "windows-2025"}'
            } | jq -sc
          )
          echo "include=$MATRIX_INCLUDE" >> $GITHUB_OUTPUT
  build-wheels:
    needs: build-wheels-matrix
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.only }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.build-wheels-matrix.outputs.include) }}

    defaults:
      run:
        shell: bash

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      GEL_SERVER_VERSION: 6

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 50
        submodules: true

    - name: Setup WSL
      if: ${{ matrix.os == 'windows-2025' }}
      uses: vampire/setup-wsl@6a8db447be7ed35f2f499c02c6e60ff77ef11278  # v6.0.0
      with:
        wsl-shell-user: edgedb
        additional-packages:
          ca-certificates
          curl

    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392  # v3.6.0

    - name: Install Gel
      # Linux installs via the CIBW_BEFORE_ALL_LINUX command below
      if: runner.os != 'Linux'
      uses: geldata/setup-gel@v1
      with:
        server-version: ${{ env.GEL_SERVER_VERSION }}

    - uses: pypa/cibuildwheel@v3.0.1
      with:
          only: ${{ matrix.only }}
      env:
        CIBW_BUILD_VERBOSITY: 1
        # CIBW_BEFORE_ALL_LINUX: >
        #   GEL_SERVER_VERSION=${{ env.GEL_SERVER_VERSION }} .github/workflows/install-gel.sh
        # CIBW_TEST_EXTRAS: "test"
        # CIBW_TEST_COMMAND: >
        #   python {project}/tests/__init__.py
        # CIBW_TEST_COMMAND_WINDOWS: >
        #   python {project}\tests\__init__.py
        # CIBW_TEST_COMMAND_LINUX: >
        #   PY=`which python`
        #   && CODEGEN=`which gel-py`
        #   && chmod -R go+rX "$(dirname $(dirname $(dirname $PY)))"
        #   && su -l gel -c "GEL_PYTHON_TEST_CODEGEN_CMD=$CODEGEN $PY {project}/tests/__init__.py"

    - uses: actions/upload-artifact@v4
      with:
        name: dist-wheel-${{ matrix.only }}
        path: wheelhouse/*.whl

  publish:
    needs: [build-sdist, build-wheels]
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/gel
    permissions:
      id-token: write
      attestations: write
      contents: write
      deployments: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 5
        submodules: false

    - uses: actions/download-artifact@v4
      with:
        path: dist/
        pattern: dist-*
        merge-multiple: true

    - name: Extract Release Version
      id: relver
      run: |
        set -e
        echo ::set-output name=version::$(cat dist/VERSION)
        rm dist/VERSION

    - name: Merge and tag the PR
      uses: edgedb/action-release/merge@master
      with:
        github_token: ${{ secrets.RELEASE_BOT_GITHUB_TOKEN }}
        ssh_key: ${{ secrets.RELEASE_BOT_SSH_KEY }}
        gpg_key: ${{ secrets.RELEASE_BOT_GPG_KEY }}
        gpg_key_id: "5C468778062D87BF!"
        tag_name: v${{ steps.relver.outputs.version }}

    - name: Publish Github Release
      uses: elprans/gh-action-create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.relver.outputs.version }}
        release_name: v${{ steps.relver.outputs.version }}
        target: ${{ github.event.pull_request.base.ref }}
        body: ${{ github.event.pull_request.body }}
        draft: true

    - run: |
        ls -al dist/

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true
